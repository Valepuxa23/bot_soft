import logging
import sqlite3
import random
import telebot
from telebot import types
from db import Database
import os
import shutil
import datetime


bot = telebot.TeleBot('6966549610:AAGkSZkDXIQ6oevh_fOHuoEPT2QPdFKwtFQ')
db = Database('C:/Users/DonZhidoMasson/PycharmProjects/WorkinBotTInka/bot_soft/Database.db')

def numbers_in_str(string):
    for x in string:
        if [str(s) == x for s in range(10)].count(True):
            return True
    return False

def forbidden_symbols(string):
    f = "<>?.,{}[]\\|/-=_+()*&^%$#!;:~`\'\""
    for x in string:
        if [str(s) == x for s in list(f)].count(True):
            return True
    return False



# @bot.message_handler(content_types=['voice', ])


@bot.message_handler(content_types=['text'], func=lambda message: True)
def all_message(add):
    #–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ë–î
    user_existst = db.user_exists(add.chat.id)
    if not user_existst:
        bot.send_message(add.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')
        db.add_user(add.chat.id)
        db.set_lc(add.chat.id, 'reg_name')
        return
    else:
        l_c = db.get_lc(add.chat.id).split('.')
        if l_c[0].split('_')[0] != 'reg':
            db.set_lc(add.chat.id, 'home')

        #–ü–†–ê–í–ò–õ–û –î–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û –°–ò–ú–í–û–õ–û–í –í –î–û–ë–û–í–õ–Ø–ï–ú–û–ú –°–û–§–¢–ï
    match l_c[0]:
        #######
        case 'added_chapter':
            buttons = types.InlineKeyboardMarkup(row_width=1)
            db.set_lc(add.chat.id, 'home')
            chapter = add.text
            if len(chapter) > 120:
                return
            db.add_chapters(chapter, 'CAACAgIAAxkBAAELdLJl1Iv8iMINJWam0G2CmZqGO5RsUgACVjsAApP1wUs7KGkS3u8v8TQE')
            bot.send_message(add.chat.id, '–†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω!')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
            buttons.add(back)
            bot.send_message(add.chat.id, '–ù–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons)

        ########

        case 'add_soft':
            buttons = types.InlineKeyboardMarkup(row_width=1)
            db.set_lc(add.chat.id, 'home')
            soft = add.text
            if len(soft) >= 4096:
                return #–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            db.add_soft(l_c[1], soft, add.chat.id)
            bot.send_message(add.chat.id, '–°–æ—Ñ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
            buttons.add(back)
            bot.send_message(add.chat.id, '–ù–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons)

        #–ü–æ–ª—è –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í –ë–û–¢–ï + –ü–†–û–í–ï–†–ö–ò
        case 'reg_name':
            answer = add.text
            if not 2 <= len(answer) <= 32 or numbers_in_str(answer) or forbidden_symbols(answer) or answer.count("@") > 0:
                bot.send_message(add.chat.id, '–û–ª–æ, –æ–ø–µ—Ä–∞—Ç–æ—Ä, –≤–≤–µ–¥–∏ –∏–º—è(–°–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–æ–≤–æ–∫))')
                return
            db.update_user(add.chat.id, 'name', answer)
            db.set_lc(add.chat.id, 'reg_surname')

            bot.send_message(add.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é.')
            return
        case 'reg_surname':
            answer = add.text
            if not 2 <= len(answer) <= 32 or numbers_in_str(answer) or forbidden_symbols(answer) or answer.count("@") > 0:
                bot.send_message(add.chat.id, '–§–∞–º–∏–ª–∏—é, –¥–∞-–¥–∞)')
                return
            db.update_user(add.chat.id, 'surname', answer)
            db.set_lc(add.chat.id, 'reg_link')
            bot.send_message(add.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º.')
            return
        case 'reg_link':
            answer = add.text
            if not 6 <= len(answer) <= 33 or answer[0] != '@':
                bot.send_message(add.chat.id, '–°—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –µ—Å–ª–∏ —á—Ç–æ, –¥–µ—Ä–∂—É –≤ –∫—É—Ä—Å–µ))))0))')
                return
            db.update_user(add.chat.id, 'link', answer)
            db.set_lc(add.chat.id, 'home')
            bot.send_message(add.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start')
            return

    #–ú–ï–ù–Æ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–§–¢–ê
    command = add.text.split()
    if add.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å' or add.text == '/add':
        if db.get_level(add.chat.id) >= 1:
            meinmenu = types.InlineKeyboardMarkup(row_width=2)
            item = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª', callback_data='add_soft')
            item2 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
            added_chapter = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª', callback_data='added_chapter')
            meinmenu.add(item, added_chapter, item2)
            bot.send_sticker(add.chat.id, 'CAACAgIAAxkBAAELa4Flz_icFD7SfPxMb5KuqCqXC1BHdwACmzgAAlBrwUuy7lEoMZ4wkTQE')
            bot.send_message(add.chat.id, '–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –º–º–º?', reply_markup=meinmenu)
        else:
            bot.send_message(add.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è')
            bot.send_message(add.chat.id, '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç "–Ω–∞—á–∞—Ç—å" –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start ')

    #–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    elif add.text.lower() == "–Ω–∞—á–∞—Ç—å" or add.text == '/start':
        mainmenu = types.InlineKeyboardMarkup(row_width=2)
        item_1 = types.InlineKeyboardButton(text='–ù—É–∂–µ–Ω —Å–æ—Ñ—Ç?‚å®Ô∏è', callback_data='need_soft')
        item_3 = types.InlineKeyboardButton(text='–ù–æ–º–µ—Ä –¥–µ–∂—É—Ä–Ω–æ–≥–æ‚òéÔ∏è', callback_data='key3')
        item_4 = types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –†–ìüìû', callback_data='key4')
        mainmenu.add(item_1, item_3, item_4)
        bot.send_sticker(add.chat.id, 'CAACAgIAAxkBAAELa4Nlz_kpEySgZ-FKZHW6e8IOsqmmoQACukIAAsG1GElddSfcSmr-rDQE')
        bot.send_message(add.chat.id, '–ü—Ä–∏–≤–µ—Ç, –Ω—É–ª–∏–Ω–∞! –Ø –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ!', reply_markup=mainmenu)

    #–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–∏–µ –±–¥
    elif command[0] == '/backups':
        if int(db.get_level(add.chat.id)) == 2:
            shutil.copy('C:/Users/DonZhidoMasson/PycharmProjects/WorkinBotTInka/Database.db',
                        '/backups/')
            shutil.move('C:/Users/DonZhidoMasson/PycharmProjects/WorkinBotTInka/backups/Database.db',
                             f'C:/Users/DonZhidoMasson/PycharmProjects/WorkinBotTInka/backups/Database '
                                f'{str(datetime.datetime.now()).replace(":", "-")}.db')
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    elif command[0] == '/name':
        if len(command) == 2:
            answer = command[1]
            if not 2 <= len(answer) <= 32 or numbers_in_str(answer) or forbidden_symbols(answer) or answer.count(
                    "@") > 0:
                bot.send_message(add.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è)')
                return
            db.update_user(add.chat.id, 'name', answer)
            bot.send_message(add.chat.id, f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {answer}')
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏
    elif command[0] == '/surname':
        if len(command) == 2:
            answer = command[1]
            if not 2 <= len(answer) <= 32 or numbers_in_str(answer) or forbidden_symbols(answer) or answer.count("@") > 0:
                bot.send_message(add.chat.id, '–§–∞–º–∏–ª–∏—é, –¥–∞-–¥–∞)')
                return
            db.update_user(add.chat.id, 'surname', answer)
            bot.send_message(add.chat.id, f'–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {answer}')

    #–ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∏ —Ç–≥
    elif command[0] == '/link':
        if len(command) == 2:
            answer = command[1]
            if not 6 <= len(answer) <= 33 or answer[0] != '@':
                bot.send_message(add.chat.id, '–°—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –µ—Å–ª–∏ —á—Ç–æ, –¥–µ—Ä–∂—É –≤ –∫—É—Ä—Å–µ))))0))')
                return
            db.update_user(add.chat.id, 'link', answer)
            bot.send_message(add.chat.id, f'–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {answer}')


#–ö–û–ú–ê–ù–î–ê –ö–û–¢–û–†–ê–Ø –ü–û–ö–ê–ó–´–í–ê–ï–¢ –Æ–ó–ï–†–£ –ï–ì–û ID
    elif command[0] == '/id':
        bot.send_message(add.chat.id, str(add.chat.id))

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    elif command[0] == '/level':
        if int(db.get_level(add.chat.id)) != 2:
            #–Ω–µ –∞–¥–º–∏–Ω
            bot.send_message(add.chat.id, '-1 - –ë–∞–Ω –≤ –±–æ—Ç–µ\n0 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n1 - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n2 - –ê–¥–º–∏–Ω\n')
            return bot.send_message(add.chat.id, db.get_level(add.chat.id))


        else:
            if len(command) != 3:
                bot.send_message(add.chat.id, '-1 - –ë–∞–Ω –≤ –±–æ—Ç–µ\n0 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n1 - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n2 - –ê–¥–º–∏–Ω\n')
                bot.send_message(add.chat.id,  db.get_level(add.chat.id))
                bot.send_message(add.chat.id, '/level id level_up')  #–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –£–†–û–í–ù–Ø –î–û–°–¢–£–ü–ê
                return
            db.set_level(command[1], command[2])


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    print(call.data)
    if call.data == "mainmenu":
        mainmenu = types.InlineKeyboardMarkup(row_width=2)
        need_soft_button = types.InlineKeyboardButton(text='–ù—É–∂–µ–Ω —Å–æ—Ñ—Ç?‚å®Ô∏è', callback_data='need_soft')
        call_button = types.InlineKeyboardButton(text='–ù–æ–º–µ—Ä –¥–µ–∂—É—Ä–Ω–æ–≥–æ‚òéÔ∏è', callback_data='key3')
        connected__button = types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –†–ìüìû', callback_data='key4')
        mainmenu.add(need_soft_button, call_button, connected__button)
        bot.edit_message_text('–ö–∞–∫–æ–π –µ—â–µ —Å–æ—Ñ—Ç –Ω—É–∂–µ–Ω ?', call.message.chat.id,
                              call.message.message_id, reply_markup=mainmenu)

        ###############################
    elif call.data == 'added_chapter':
        buttons = types.InlineKeyboardMarkup(row_width=1)
        if int(db.get_level(call.message.chat.id)) >= 1:
            bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞.', reply_markup=buttons)
            db.set_lc(call.message.chat.id, 'added_chapter')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
        buttons.add(back)
        # bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=buttons)



    #–ò–ù–§–û –°–í–Ø–ó–ò –° –î–ï–ñ–£–†–ù–´–ú
    elif call.data == 'key3':
        markup1 = types.InlineKeyboardMarkup()
        bot.send_message(call.message.chat.id, '–î–µ—Ä–∂–∏ –Ω–æ–º–µ—Ä –¥–µ–∂—É—Ä–Ω–æ–≥–æ 88005553535')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu')
        markup1.add(back)
        bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –æ–±—Ä–∞—Ç–æ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ", reply_markup=markup1)

    #–ö–ù–û–ü–ö–ê –°–í–Ø–ó–ò –° –†–ì
    elif call.data == 'key4':
        next_menu3 = types.InlineKeyboardMarkup()
        bot.send_message(call.message.chat.id,
                         '–º–æ–∂–µ—à—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –†–ì –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É +98888888888, –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –¢–ì')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
        next_menu3.add(back)
        bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=next_menu3)

    #–ú–ï–ù–Æ –†–ê–ó–î–ï–õ–û–í –°–û–§–¢–ê
    if call.data == 'need_soft':
        buttons = types.InlineKeyboardMarkup(row_width=1)
        chapters = db.get_chapters()
        for c in chapters:
            buttons.add(types.InlineKeyboardButton(text=c[1], callback_data=f'soft_{c[0]}'))
            print(c[1], f'soft_{c[0]}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
        buttons.add(back)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=buttons)


    # –†–ê–ó–î–ï–õ–´ –°–û–§–¢–ê
    elif call.data == 'add_soft':
        buttons = types.InlineKeyboardMarkup(row_width=1)
        chapters = db.get_chapters()
        for c in chapters:
            buttons.add(types.InlineKeyboardButton(text=c[1], callback_data=f'add_{c[0]}'))
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
        buttons.add(back)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=buttons)

    #–ü–†–û–°–ú–û–¢–† –°–û–§–¢–ê –ü–û –†–ê–ó–î–ï–õ–ê–ú/–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –°–û–§–¢–ê –í –†–ê–ó–î–ï–õ
    else:
        buttons = types.InlineKeyboardMarkup(row_width=1)
        action = call.data.split('_')
        print(action)
        if action[0] == 'soft':
            softs = db.get_soft(action[1])
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
            bot.send_sticker(call.message.chat.id, db.get_chapter_sticker(action[1]))
            buttons.add(back)
            for i in range(len(softs)):
                if i == len(softs) - 1:
                    bot.send_message(call.message.chat.id, text=softs[i][0], reply_markup=buttons)
                else:
                    bot.send_message(call.message.chat.id, text=softs[i][0])
        elif action[0] == 'add':
            if int(db.get_level(call.message.chat.id)) >= 1:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Ñ—Ç!')
                db.set_lc(call.message.chat.id, f'add_soft.{action[1]}')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mainmenu')
            buttons.add(back)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=buttons)


bot.polling(none_stop=True)